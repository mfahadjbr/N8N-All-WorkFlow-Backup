{
  "createdAt": "2025-10-17T02:44:21.979Z",
  "updatedAt": "2025-10-17T02:44:21.979Z",
  "id": "cy6Z3cpEotQfXpPS",
  "name": "VEO-3-1 UGC Automation",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "id": "023d75e0-2a70-4b26-a9bc-00d3b6f27b2c",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -1264,
        144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "api_token",
              "name": "api_token",
              "type": "string",
              "value": "=YOUR_REPLICATE_API_KEY"
            }
          ]
        },
        "options": {}
      },
      "id": "e94cda74-9f64-4cd0-b15d-ad1e29433df9",
      "name": "Set API Token",
      "type": "n8n-nodes-base.set",
      "position": [
        -896,
        176
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "amount": 5,
        "unit": "seconds"
      },
      "id": "a42cea8c-2746-4199-8379-7659be1f74ef",
      "name": "Wait 5s",
      "type": "n8n-nodes-base.wait",
      "position": [
        0,
        192
      ],
      "webhookId": "d2c4ca16-0eb2-45b4-8a2d-eec2f99df89c",
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "=https://api.replicate.com/v1/predictions/{{ $('Create Video').item.json.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Set API Token').item.json.api_token }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "2cb5f293-2c37-459b-b07c-f7070235515e",
      "name": "Check Status",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        192,
        192
      ],
      "typeVersion": 4.1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "c93d7ba1-0ef9-4087-aa10-389cb2a2c6bd",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.status }}",
              "rightValue": "succeeded"
            }
          ]
        },
        "options": {}
      },
      "id": "05a4fd2c-4443-4a68-a382-98b30f5f5eca",
      "name": "Is Complete?",
      "type": "n8n-nodes-base.if",
      "position": [
        432,
        112
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "d1bfd044-3a07-4c18-b55f-72d192596139",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.status }}",
              "rightValue": "failed"
            }
          ]
        },
        "options": {}
      },
      "id": "6ffc7d08-a4b9-41f0-9b5b-e7b7d094c1d6",
      "name": "Has Failed?",
      "type": "n8n-nodes-base.if",
      "position": [
        688,
        240
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success-response",
              "name": "response",
              "type": "object",
              "value": "={{ { success: true, result_url: $json.output, prediction_id: $json.id, status: $json.status, message: 'Other generated successfully' } }}"
            }
          ]
        },
        "options": {}
      },
      "id": "346c4ad9-6968-4b40-ac1b-5ae42c5e6e89",
      "name": "Success Response",
      "type": "n8n-nodes-base.set",
      "position": [
        672,
        0
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-response",
              "name": "response",
              "type": "object",
              "value": "={{ { success: false, error: $json.error || 'Other generation failed', prediction_id: $json.id, status: $json.status, message: 'Failed to generate other' } }}"
            }
          ]
        },
        "options": {}
      },
      "id": "db37eecc-6041-4c63-9f4d-969e124df728",
      "name": "Error Response",
      "type": "n8n-nodes-base.set",
      "position": [
        1184,
        464
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "final-result",
              "name": "final_result",
              "type": "object",
              "value": "={{ $json.response }}"
            }
          ]
        },
        "options": {}
      },
      "id": "033b5fdb-fcd9-4f5b-ae91-7a5736413621",
      "name": "Display Result",
      "type": "n8n-nodes-base.set",
      "position": [
        1488,
        144
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "jsCode": "// Log generation details for monitoring\nconst data = $input.all()[0].json;\n\nconsole.log('digitalhera/heranathalie Request:', {\n  timestamp: new Date().toISOString(),\n  prediction_id: data.id,\n  model_type: 'other'\n});\n\nreturn $input.all();"
      },
      "id": "6d693d0b-568f-49ab-99ce-618c224f9106",
      "name": "Log Request",
      "type": "n8n-nodes-base.code",
      "position": [
        0,
        0
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "=======================================\n        IMAGE TO VIDEO GENERATOR\n=======================================\nFor any questions or support, please contact:\n    Yaron@nofluff.online\n\nExplore more tips and tutorials here:\n   - YouTube: https://www.youtube.com/@YaronBeen/videos\n   - LinkedIn: https://www.linkedin.com/in/yaronbeen/\n\nüöÄ Need a scalable solution for generating \n   and automating media buying?\n   Check out ROASPIG.com\n=======================================",
        "height": 432,
        "width": 804,
        "color": 4
      },
      "id": "5a09abfb-fde9-4a14-a58b-a8304bdd6e47",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2128,
        16
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## üé¨ **VEO 3.1 - IMAGE TO VIDEO WORKFLOW**\n\n**üî• Powered by Replicate API and n8n Automation**\n\n---\n\n### üìù **Model Overview**\n\n- **Owner**:Google\n- **Model**: VEO3.1\n- **Type**: Image to Video Generation\n\n\n**üéØ What This Model Does:**\nTransforms static images into dynamic videos using AI. Perfect for creating promotional videos, social media content, and animated presentations from single images.\n\n---\n\n### üìã **Parameter Reference**\n\n**üî¥ Required Parameters:** \n- **image** (string): Input image URL to animate\n- **prompt** (string): Description of the desired video motion and action\n\n**üîµ Optional Parameters:** \n- **seed** (integer): Random seed for reproducible generation\n- **num_frames** (integer): Number of frames to generate (affects video length)\n- **guidance_scale** (number): How closely to follow the prompt (7-15 typical)\n- **num_inference_steps** (integer): Quality vs speed tradeoff (20-50 typical)\n- *Additional parameters available in API documentation*\n\n---\n\n### üîß **Workflow Components Explained**\n\n**üéØ Manual Trigger**\n- Starts the workflow execution\n- Click to begin video generation process\n\n**üîê Set API Token** \n- Configures your Replicate API authentication\n- Replace with your actual Replicate API token\n- Essential for accessing the wan-video model\n\n**‚öôÔ∏è Add Seed Image and Prompt**\n- Sets the input image URL and video prompt\n- Properly formats the prompt to handle quotes\n- Pre-configured with AG1 marketing video example\n\n**üöÄ Create Video**\n- Sends the generation request to Replicate API\n- Uses VEO3.1-Fast model\n- Returns a prediction ID for status tracking\n\n**‚è≥ Wait & Status Checking Loop**\n- Waits 5 seconds then checks prediction status\n- Continues checking until completion or failure\n- Implements intelligent retry logic with 10-second delays\n\n**‚úÖ Success/Error Handling**\n- Routes successful completions to success response\n- Handles failures gracefully with error details\n- Returns structured JSON response with video URL or errors\n\n**üìä Logging & Monitoring**\n- Logs all requests for debugging and monitoring\n- Tracks timestamps and prediction IDs\n- Helps identify issues during development\n\n---\n\n### üåü **Key Benefits**\n\n- **üé¨ AI Video Generation**: Transform static images into engaging videos\n- **üì± Perfect for Social Media**: Create dynamic content for TikTok, Instagram, YouTube\n- **üîÑ Automated Workflow**: Handles the complete generation pipeline automatically\n- **üõ°Ô∏è Error Resilience**: Built-in retry logic and comprehensive error handling\n- **üìà Production Ready**: Includes logging, monitoring, and structured responses\n- **‚ö° Efficient Processing**: Optimized API calls with intelligent status checking\n\n---\n\n### üöÄ **Quick Start Instructions**\n\n1. **üîë Get Your API Key**\n   - Sign up at https://replicate.com\n   - Navigate to your account settings\n   - Copy your API token\n\n2. **üîß Configure the Workflow**\n   - Replace the API token in \"Set API Token\" node\n   - Update image URL in \"Add Seed Image and Prompt\" node\n   - Customize the prompt for your desired video motion\n\n3. **‚ñ∂Ô∏è Execute the Workflow**\n   - Click the 'Manual Trigger' to start\n   - Monitor the execution in the n8n interface\n   - Check logs for detailed execution information\n\n4. **üì• Get Your Results**\n   - Successful generations return a URL to your video\n   - Download the MP4 file from the provided URL\n   - Video typically ready in 30-120 seconds\n\n---\n\n### üîç **Troubleshooting Guide**\n\n**Common Issues:**\n- **Invalid API Token**: Ensure your Replicate token is valid and has sufficient credits\n- **Image URL Issues**: Verify the image URL is publicly accessible\n- **Prompt Formatting**: Use single quotes inside prompts to avoid JSON errors\n- **Generation Timeout**: Video generation can take 1-3 minutes - be patient\n\n**Best Practices:**\n- Use high-quality input images (minimum 512x512)\n- Write detailed, specific prompts for better results\n- Test with shorter prompts first, then add complexity\n- Keep API tokens secure - use n8n credentials feature\n- Monitor your Replicate usage and billing\n\n---\n\n### üìù **Example Use Cases**\n\n- **Product Demos**: Animate product images with usage demonstrations\n- **Social Media Ads**: Create eye-catching video ads from product photos\n- **Story Telling**: Bring illustrations to life with motion\n- **Marketing Content**: Transform static campaigns into dynamic videos\n- **Educational Content**: Animate diagrams and infographics\n\n---\n\n**üîó Additional Resources:**\n- Replicate API Docs: https://replicate.com/docs\n- n8n Documentation: https://docs.n8n.io\n\n---",
        "height": 3206,
        "width": 589,
        "color": 4
      },
      "id": "161bb850-ddde-4655-b2a1-dbe23ec8085d",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2160,
        512
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.replicate.com/v1/models/google/veo-3.1-fast/predictions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer  {{ $('Set API Token').item.json.api_token }}"
            },
            {
              "name": "Prefer",
              "value": "wait"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"input\": {\n    \"image\": \"{{ $json.Seed_image }}\",\n    \"prompt\": \"{{ $json.Prompt }}\"\n  }\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "4994d785-c737-4b56-899c-f3aeffd8da93",
      "name": "Create Video",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -336,
        176
      ],
      "typeVersion": 4.1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "924b6590-46a4-4ad5-b58d-0804991c633e",
              "name": "Seed_image",
              "type": "string",
              "value": "https://replicate.delivery/xezq/h3zMCYNJ96KeR69I6vRhaR6xnBOi5i4OQ2P74IkcThalDyvKA/tmpte2si914.jpeg"
            },
            {
              "id": "76ad3bd8-da89-413b-b5ab-f031d4d221f4",
              "name": "Prompt",
              "type": "string",
              "value": "Whey Protein 'Game Changer' Video Prompt Scene Setup: Woman in modern kitchen (white cropped hoodie, olive green leggings), holding AG1 package with both hands at chest level, green smoothie in blender visible to the side Action (0-5 seconds): 0-1 sec: Start with her looking down at the AG1 package 1-2 sec: She looks up at camera with growing smile (like discovering something amazing) 2-4 sec: Holds package up slightly higher, direct eye contact: 'This is an absolute GAME changer!' 4-5 sec: Quick confident nod while bringing package back to chest level, maintaining smile Camera: Static shot or very subtle push-in Frame from waist up (like reference photo) Bright, natural lighting Kitchen background slightly blurred for focus on her and product Energy: Authentic excitement, like she's sharing a secret with her best friend - natural, not overly polished"
            }
          ]
        },
        "options": {}
      },
      "id": "8c9d2a50-61dc-48c7-be37-f0e7b4a09797",
      "name": "Add Seed Image and Prompt",
      "type": "n8n-nodes-base.set",
      "position": [
        -592,
        192
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "Add Your Replicate API",
        "height": 416
      },
      "id": "fa263b44-0d83-4d38-855a-fd58801e8ebc",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -960,
        80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "1- Add a link to your Seed image. If you dont have one, you can generate it using OpenAI or Nano Banana\n\n\n\n\n",
        "height": 336
      },
      "id": "f2664c27-2ba9-4228-a4a8-b40885a7d428",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -656,
        80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# üìù Image-to-Video Prompt Writing Guidelines\n\nQuick reference for crafting effective image-to-video prompts.\n\n---\n\n## ‚úÖ DO\n\n### **Format Rules**\n- Use single quotes (`'`) not double quotes\n- Keep prompts on a single line\n- Separate elements with commas\n- Write 15-40 words for best results\n- Use present tense\n\n### **Essential Elements**\n\n**1. Main Action** - What's happening\n```\nCamera pans across sunset, subject walks forward, leaves fall gently\n```\n\n**2. Camera Movement** - Pick one or two\n- Zoom: in, out, slow, quick\n- Pan: left, right, sweep\n- Tilt: up, down\n- Track: follow, orbit, dolly\n- Static: fixed, locked\n\n**3. Subject Motion** - How things move\n- Speed: slowly, quickly, gradually, suddenly\n- Direction: forward, backward, upward, downward\n- Type: walking, floating, spinning, swaying\n\n**4. Environment** - Set the scene\n- Time: sunrise, golden hour, night\n- Weather: rain, fog, clear, windy\n- Atmosphere: misty, crisp, ethereal\n\n**5. Lighting & Style**\n- Lighting: soft light, harsh shadows, backlit, volumetric\n- Quality: cinematic, realistic, dreamy, smooth motion\n- Color: warm tones, cool palette, vibrant, muted\n\n### **Prompt Structure**\n```\n[Action], [Camera], [Motion], [Environment], [Lighting], [Style]\n```\n\n---\n\n## ‚ùå DON'T\n\n### **Prohibited Characters**\n- `\"` Double quotes - Breaks JSON\n- `\\` Backslash - Escape errors\n- Line breaks - Invalid JSON\n- `{ } [ ] @ # $ % ^ & *` - Parsing issues\n\n### **Avoid These Mistakes**\n- ‚ùå Vague terms: \"things move around\"\n- ‚ùå Too long: Over 40 words\n- ‚ùå No camera info: \"person walks\"\n- ‚ùå Conflicting: \"fast slow motion\"\n- ‚ùå Too many actions: More than 5 elements\n- ‚ùå Technical jargon: \"temporal interpolation\"\n\n---\n\n## üí° Examples\n\n### **Good:**\n```\nCamera slowly zooms in on subject's face, soft golden hour lighting, gentle wind blowing hair, cinematic depth of field, smooth motion\n```\n```\nWide pan left to right across mountains, clouds drift overhead, warm sunset glow, atmospheric haze, slow smooth motion\n```\n```\nTracking shot follows runner from behind, rhythmic movement, motion blur on background, dynamic sports style, steady camera\n```\n\n### **Bad:**\n```\n\"Camera moves\" \\n and person does stuff\n```\n*Issues: Double quotes, line break, vague*\n```\nThings happen and the camera performs multiple complex movements while everything changes\n```\n*Issues: Too vague, no specific details*\n\n---\n\n## üéØ Quick Checklist\n\n- [ ] No `\"` `\\` or line breaks\n- [ ] Single line, 15-40 words\n- [ ] Camera movement specified\n- [ ] Motion described clearly\n- [ ] Lighting/style included\n- [ ] No conflicting instructions\n- [ ] Specific, not vague\n\n---\n\n## üìö Quick Vocabulary\n\n**Camera:** zoom, pan, tilt, track, orbit, dolly, aerial, static, POV  \n**Motion:** slow, fast, smooth, gradual, sudden, floating, spinning, drifting  \n**Lighting:** soft, harsh, backlit, golden hour, volumetric, rim light  \n**Style:** cinematic, realistic, dreamy, artistic, smooth, slow motion",
        "height": 3968
      },
      "id": "f75edf50-4b32-4f15-93ca-87815266d9a7",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -656,
        416
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "1765a7e7-59e8-4e24-a7bf-cd18939d93e7",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -1168,
        1296
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "content": "Connect this node to your storage in order to save the predictions\n",
        "height": 432
      },
      "id": "89879253-6a5a-43a0-9cd1-ca4586852839",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1440,
        16
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Batch Processing Guide\n\n## üîÑ Optional: Generate Multiple Videos\n\nConnect the \"Batch Process Videos\" node after \"Set API Token\" for bulk generation.\n\n### Three Options:\n\n**Option 1: Same Image + Same Prompt = Multiple Videos**\n- Get different variations from identical inputs\n- Example: 1 product photo ‚Üí 5 unique videos\n\n**Option 2: Same Image + Different Prompts = Multiple Videos**\n- Test different animations on one image  \n- Example: 1 photo with 10 different prompts\n\n**Option 3: Different Images + Different Prompts = Multiple Videos**\n- Bulk create unique content\n- Example: 50 products, each with custom prompt",
        "height": 752,
        "width": 544
      },
      "id": "211babec-913e-4b63-a4c8-9da7a8694a6a",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1456,
        752
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "amount": 90,
        "unit": "seconds"
      },
      "id": "7fe99c4c-32e9-4bc7-8760-91255cb7c20d",
      "name": "Wait 90s",
      "type": "n8n-nodes-base.wait",
      "position": [
        560,
        448
      ],
      "webhookId": "51a05aef-e220-406d-8c2c-e59c82c3e26e",
      "typeVersion": 1
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Set API Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API Token": {
      "main": [
        [
          {
            "node": "Add Seed Image and Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 5s": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Is Complete?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Complete?": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Has Failed?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Failed?": {
      "main": [
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait 90s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Response": {
      "main": [
        [
          {
            "node": "Display Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Response": {
      "main": [
        [
          {
            "node": "Display Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Request": {
      "main": [
        [
          {
            "node": "Wait 5s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Video": {
      "main": [
        [
          {
            "node": "Log Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Seed Image and Prompt": {
      "main": [
        [
          {
            "node": "Create Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 90s": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "8d4a47a4-c61d-4173-bc95-b2135d221180",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-10-17T02:44:21.979Z",
      "updatedAt": "2025-10-17T02:44:21.979Z",
      "role": "workflow:owner",
      "workflowId": "cy6Z3cpEotQfXpPS",
      "projectId": "X5HfRiTZREe3eBAa"
    }
  ],
  "tags": []
}